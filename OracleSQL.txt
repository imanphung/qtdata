==========================================================
					Import MarketData
==========================================================
1. Create TABLESPACE:
CMD> sqlplus / as sysdba

+ SSAMLFILE: A sSAMlfile tablespace is a traditional Oracle tablespace, which can contain 1022 datafiles or tempfiles, each of which can contain up to approximately 4 million (222) blocks.
	SQL> CREATE TABLESPACE MARKETDB
		DATAFILE 'D:\oracle\oradata\ORCL\MARKETDB01.DBF' 
    		SIZE 1024M
    		AUTOEXTEND ON NEXT 100M MAXSIZE 32000M;

+ BIGFILE: A bigfile tablespace contains only one datafile or tempfile, which can contain up to approximately 4 billion (232) blocks. The maximum size of the single datafile or tempfile is 128 terabytes (TB) for a tablespace with 32K blocks and 32TB for a tablespace with 8K blocks.
	SQL> CREATE BIGFILE TABLESPACE QTDATADB
		DATAFILE '/opt/oracle/oradata/ORCLCDB/QTDATADB.DBF' 
    		SIZE 10G
    		AUTOEXTEND ON NEXT 100G MAXSIZE 2T;


+ EDIT TABLESPACE
	SQL> ALTER TABLESPACE QTDATADB
 		ADD DATAFILE '/u01/app/oracle/oradata/ORCLCDB/QTDATADB.DBF'
   		SIZE 1024M
   		AUTOEXTEND ON;

2. Create user:
alter session set "_ORACLE_SCRIPT"=true;  
SQL> create user SAM identified by qtdatA2020 default tablespace QTDATADB account unlock;

3. Provide roles:
SQL> GRANT CONNECT,RESOURCE,DBA TO SAM;

4. Provide privileges:
SQL> GRANT CREATE SESSION, GRANT ANY PRIVILEGE TO SAM;
SQL> GRANT UNLIMITED TABLESPACE TO SAM;

Or

SQL> GRANT ALL PRIVILEGES TO SAM;

5. Create directory:

SQL> CREATE OR REPLACE DIRECTORY IMP_DIR AS '/home/oracle';
SQL> GRANT READ, WRITE ON DIRECTORY IMP_DIR TO SAM;
SQL> grant unlimited tablespace to SAM;

4. Import data from dump file:

CMD> impdp HRMS/qtdatA2020 tables=IGN_STOCK_INFO_HIS,IGN_DERIVATIVES_INFO_HIS,HOSTOCKINFOHIS,HOSTOCK directory=IMP_DIR dumpfile= QTDATADB.DBF logfile=impQTDATADB.log

----------SQL----------
1. Check user info:
SQL> SELECT * FROM all_users
SQL> SELECT * FROM dba_users
SQL> SELECT * FROM user_users

2. Check table info:
SQL> SELECT table_name FROM all_tables
SQL> SELECT table_name FROM dba_tables
SQL> SELECT table_name FROM user_tables

3. Check free space on tablespace:
SQL> SELECT TABLESPACE_NAME,SUM(BYTES)/1024/1024/1024 "FREE SPACE(GB)"
	FROM DBA_FREE_SPACE GROUP BY TABLESPACE_NAME;

4. Check table size:
SQL> select bytes from user_segments where segment_name like 'table_name'
Check segments size
SQL> select owner, sum(bytes)/1024/1024 Size_MB from dba_segments group by owner
	
5. Check table column:
SQL> SELECT column_name
FROM user_tab_cols
WHERE table_name = 'table_name'

https://technology.amis.nl/2017/12/30/oracle-database-in-a-docker-container-from-oracle-container-registry/

docker run --name oracledb12c -d --env-file /root/ora.conf -p 1521:1521 -p 5500:5500 -e ORACLE_SID=ORCLCDB -e ORACLE_PDB=ORCLPDB1 -e ORACLE_PWD=qtdata@2020 -v /home/oracle/oradata:/home/oracle/oradata oracle/database:19.3.0-ee

6. Check maximum connection
    select current_utilization, limit_value 
    from v$resource_limit 
    where resource_name='sessions';
	
-------LINKEDIN-------
1.Table space
	SQL> CREATE BIGFILE TABLESPACE LINKEDINDB
		DATAFILE '/u02/app/oracle/oradata/ORCLCDB/LINKEDIN.DBF' 
    		SIZE 10G
    		AUTOEXTEND ON NEXT 100G MAXSIZE 2T;

2. Create user:
alter session set "_ORACLE_SCRIPT"=true;  
SQL> create user LINKEDIN identified by qtdatA2020 default tablespace LINKEDINDB account unlock;


3. Provide roles:
SQL> GRANT CONNECT,RESOURCE,DBA TO LINKEDIN;

4. Provide privileges:
SQL> GRANT CREATE SESSION, GRANT ANY PRIVILEGE TO LINKEDIN;
SQL> GRANT UNLIMITED TABLESPACE TO LINKEDIN;

Or

SQL> GRANT ALL PRIVILEGES TO LINKEDIN;

5. Create directory:

SQL> CREATE OR REPLACE DIRECTORY IMP_DIR AS '/home/oracle';
SQL> GRANT READ, WRITE ON DIRECTORY IMP_DIR TO LINKEDIN;
SQL> grant unlimited tablespace to LINKEDIN;

6. Check Connection pooling and The number of sessions currently active
SQL> SELECT * FROM V$SESSION WHERE PROGRAM IS NOT NULL;
SQL> SELECT COUNT(*) FROM v$session

7. Stop session
SQL> ALTER SYSTEM ENABLE RESTRICTED SESSION;
7. Configuring the connection pool in python
 
